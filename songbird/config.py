from __future__ import annotations
from typing import Optional


class CryptoMode:
    Normal: CryptoMode
    Suffix: CryptoMode
    Lite: CryptoMode


class Strategy:
    @staticmethod
    def every(duration: float) -> Strategy: ...
    @staticmethod
    def backoff_default() -> Strategy: ...
    @staticmethod
    def backoff(min: float, max: float, jitter: float) -> Strategy: ...


class DecodeMode:
    Pass: DecodeMode
    Decrypt: DecodeMode
    Decode: DecodeMode


class Config:
    def __init__(self) -> None: ...
    def set_crypto_mode(self, crypto_mode: CryptoMode): ...
    def set_decode_mode(self, decode_mode: DecodeMode): ...
    def set_preallocated_tracks(self, preallocated_tracks: int): ...
    def set_driver_timeout(self, driver_timeout: Optional[float]): ...
    def set_driver_retry(self, strategy: Strategy, retry_limit: Optional[int]): ...
    def set_gateway_timeout(self, gateway_timeout: Optional[float]): ...
