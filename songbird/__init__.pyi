from typing import Optional

class SongbirdError(Exception): ...
class UseAsyncConstructorError(SongbirdError): ...
class CouldNotConnectToRTPError(SongbirdError): ...
class CouldNotOpenFileError(SongbirdError): ...
class YtdlError(SongbirdError): ...
class FfmpegError(SongbirdError): ...


class Driver:
    @staticmethod
    async def create() -> Driver: ...
    async def connect(token: str, endpoint: str, session_id: str, guild_id: int, channel_id: int, user_id: int) -> None: ...
    async def leave(self) -> None: ...
    async def play_source(self, playable: Playable) -> None: ...
    async def mute(self) -> None: ...
    async def unmute(self) -> None: ...
    async def is_muted(self) -> None: ...
    async def play_source(self, playable: Playable) -> None: ...
    async def play_only_source(self, playable: Playable) -> None: ...
    async def set_bitrate(self, bitrate: int) -> None: ...
    async def set_bitrate_to_max(self) -> None: ...
    async def set_bitrate_to_auto(self) -> None: ...
    async def stop(self) -> None: ...
    async def set_config(self, config: Config) -> None: ...


class Playable:
    @staticmethod
    def bytes(bytes: bytes, stereo: bool) -> Playable: ...
    @staticmethod
    def ffmpeg(filename: str) -> Playable: ...
    @staticmethod
    def ytdl(url: str) -> Playable: ...
    @staticmethod
    def file(url: str) -> Playable: ...

class CryptoMode:
    Normal: CryptoMode
    Suffix: CryptoMode
    Lite: CryptoMode


class Strategy:
    @staticmethod
    def every(duration: float) -> Strategy: ...
    @staticmethod
    def backoff_default() -> Strategy: ...
    @staticmethod
    def backoff(min: float, max: float, jitter: float) -> Strategy: ...


class DecodeMode:
    Pass: DecodeMode
    Decrypt: DecodeMode
    Decode: DecodeMode


class Config:
    def __init__(self) -> None: ...
    def set_crypto_mode(self, crypto_mode: CryptoMode): ...
    def set_decode_mode(self, decode_mode: DecodeMode): ...
    def set_preallocated_tracks(self, preallocated_tracks: int): ...
    def set_driver_timeout(self, driver_timeout: Optional[float]): ...
    def set_driver_retry(self, strategy: Strategy, retry_limit: Optional[int]): ...
    def set_gateway_timeout(self, gateway_timeout: Optional[float]): ...
